// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialData credential data
// swagger:model CredentialData
type CredentialData struct {

	// The claims about a DID or identity that will be signed by Credential Provider
	// Required: true
	CredentialSubject interface{} `json:"credentialSubject"`

	// The evidence obtained from the validation of the claims, may be photos, physical documents, links, etc
	Evidence interface{} `json:"evidence,omitempty"`

	// The credential ID generated by the Provider Credential
	// Required: true
	ID *string `json:"id"`

	// credential issuance date
	// Format: date-time
	IssuanceDate strfmt.DateTime `json:"issuanceDate,omitempty"`

	// The DID or identity of Provider Credential
	Issuer string `json:"issuer,omitempty"`

	// proof
	// Required: true
	Proof *Proof `json:"proof"`

	// The types of this credential
	// Required: true
	Type []string `json:"type"`
}

// Validate validates this credential data
func (m *CredentialData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuanceDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProof(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialData) validateCredentialSubject(formats strfmt.Registry) error {

	if err := validate.Required("credentialSubject", "body", m.CredentialSubject); err != nil {
		return err
	}

	return nil
}

func (m *CredentialData) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CredentialData) validateIssuanceDate(formats strfmt.Registry) error {

	if swag.IsZero(m.IssuanceDate) { // not required
		return nil
	}

	if err := validate.FormatOf("issuanceDate", "body", "date-time", m.IssuanceDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CredentialData) validateProof(formats strfmt.Registry) error {

	if err := validate.Required("proof", "body", m.Proof); err != nil {
		return err
	}

	if m.Proof != nil {
		if err := m.Proof.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proof")
			}
			return err
		}
	}

	return nil
}

func (m *CredentialData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialData) UnmarshalBinary(b []byte) error {
	var res CredentialData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
